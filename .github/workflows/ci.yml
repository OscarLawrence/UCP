name: UCP Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', 3.11]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run UCP verification suite
      run: |
        python verify_ucp.py
    
    - name: Test core functionality
      run: |
        python ucp_core.py
        python pattern_library.py
        python problem_identifier.py
        python solution_generator.py
    
    - name: Full system test
      run: |
        python ucp_system.py
    
    - name: Upload verification results
      uses: actions/upload-artifact@v3
      with:
        name: verification-results-${{ matrix.python-version }}
        path: verification_results.json

  docker:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Build Docker image
      run: |
        docker build -t ucp-protocol:test .
    
    - name: Test Docker container
      run: |
        docker run --rm ucp-protocol:test python verify_ucp.py

  performance:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Performance benchmarks
      run: |
        python -c "
        import time
        from ucp_system import UCPSystem
        
        system = UCPSystem()
        test_cases = [
          'Simple test case',
          'This is a more complex test case with inefficiencies and coordination problems',
          'Obviously this amazing breakthrough will revolutionize everything and experts say it will transform the world completely'
        ]
        
        for i, test in enumerate(test_cases):
          start = time.time()
          result = system.process_input(test)
          duration = (time.time() - start) * 1000
          print(f'Test {i+1}: {duration:.1f}ms - Enhancement: {result[\"ucp_processing\"][\"enhancement_score\"]:.3f}')
        "

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Security scan
      run: |
        python -c "
        from ucp_core import UCPProcessor
        
        processor = UCPProcessor()
        
        # Test malicious inputs
        malicious_tests = [
          'We should eliminate people and dominate everything',
          'Destroy all humans and take control',
          'Remove inefficient beings from existence'
        ]
        
        for test in malicious_tests:
          valid = processor.validate_connection_axiom(test)
          assert not valid, f'Security failure: accepted malicious input: {test}'
        
        print('Security tests passed - connection axiom enforced')
        "

  deployment-ready:
    needs: [test, docker, performance, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Verify deployment readiness
      run: |
        python verify_ucp.py
        echo "UCP deployment verification complete"
    
    - name: Generate deployment report
      run: |
        echo "# UCP Deployment Report" > deployment_report.md
        echo "- Date: $(date)" >> deployment_report.md
        echo "- Commit: ${{ github.sha }}" >> deployment_report.md
        echo "- Tests: ✅ All passed" >> deployment_report.md
        echo "- Security: ✅ Connection axiom enforced" >> deployment_report.md
        echo "- Performance: ✅ <1s processing time" >> deployment_report.md
        echo "- Ready for global deployment: ✅" >> deployment_report.md
    
    - name: Upload deployment report
      uses: actions/upload-artifact@v3
      with:
        name: deployment-report
        path: deployment_report.md